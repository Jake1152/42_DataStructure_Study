어떻게 구현할 것인가? 25DEC21 PM 3:30
array list, linked list에 따라 다르게
그러면 2개를 다 구현하느가
아니면 listType이라는 멤버변수나 파라미터를 통해 구분할 것인가?
그런식으로 구분이 가능한가?
결국 array, linked에 따라 다르게 구현해야할 필요가 있다 생각
둘이 방식이 다르다.

array면 어떻게?
별도의 공간이 필요할 수 있다.
linked면 link의 연결만 다른 곳으로 바꾼다.

테스트는?
pdf에 나온 예제를 기반으로 한다.

80 50 70 10 60 20 40 30

sorting도 ASC DESC로 할 수 있다.
기본을 놔둔다음에 reverse한다?
그러면 더 느려진다.
key값의 기준에 따라 달라지게 하는게 낫다 생각

고려할 부분
- list type
- 정렬 방식 (오름, 내림)
- 별도의 자료공간을 동적할당해야하는 경우
  free신경 쓸 것



# selection sort
N ** 2  
오름,내림 차순 기준에 따라
최소, 최대값을 왼쪽으로 보낸다.
이후 정렬이 안된 리스트에 있는 값을 계속 비교하여
최소, 최대를 왼쪽을 이동시킨다.
즉 왼쪽에는 정렬 된 애들만
오른쪽에는 아직 정렬 안된 애들만 있다.
그런데 불안정한 정렬인 이유는 무엇인가?


# bubble
왼쪽부터 비교해서 오른쪽엥 정렬된 값을 넣는다.
비교할때마다 기준에 맞지 않으면 서로 위치를 바꾼다.


왜 안정적인 정렬인가?
key값이 같을때 이동이 없는 정렬을 안정적인 정렬이라고 한다.


# insert
알맞은 위치에 넣는 다는 논리로 이어진다.

왼쪽부터 순회
일단 선택한 값을 왼쪽에 넣는다.
오른쪽에 정렬 안된 리스트에서 다시 그중에 맨 왼쪽에 있는 값을 선택한다.
선택한 값을 왼쪽에 삽입한 값들 중에서 적절한 위치를 찾아서 삽입한다.
끝까지 다 순회하면 종료
이미 정렬된 경우 별도로 이동이 없어서 좋다.


# shell
선택 || 삽입 정렬을 먼곳에서부터하는 방식
이유는 기존의 것은 가까이 잇는 것만 비교서 일정 간격을 떨어진 경우를 봐서 비교하면 평균적인 연산을 떨굴 수 있던것으로 기억


# merge
절반씩 쪼갠다.
분할 정복방식
1개가 될때까지 분할한다.
분할한다음에 그들끼리 비교한다.
10 15 25 30 1 | 4 6 9 5
10 15 25 | 30 1 | 4 6 | 9 5
10 15 | 25 | 30 | 1 | 4 | 6 | 9 | 5
10 | 15 | 25 | 30 | 1 | 4 | 6 | 9 | 5

10  15 | 25  30 | 1  4 | 6  9 | 5
10  15 | 25  30 | 1  4 | 6  9 | 5

[]

이런 경우 오름차순일때느 어떻게 되는가?

- 별도의 메모리 공간이 필요하다.
- 원소가 홀수개일때는?
- 2의 제곱이 아닐때는?



# quick
피벗을 기준으로 왼쪽과 오른쪽으로 나눈다.
그러므로 초기에 피벗을 잘 선택하는게 중요하다.
중위값을 선택하는것이 좋다.

평균적으로는 N ** 2 시간복잡도를 가진다.


# heap
heap을 구성한다.
min, max heap
binary tree
부모, 자식의 기준에 따라 달라진다.



# ridix
기수에 따라 달라진다.
키 값의 자릿수 값에 따라 버킷에 배정한다.
특정 자릿수의 값이 많을 경우 쏠림이 발생할 수 있다.



# 계수, 버켓 정렬, etc
계수 정렬이 기억나지 않는다.
버켓 정렬은 ridix의 상위 분류였던것으로 기억

# tim sort
python에서 사용하는 정렬


